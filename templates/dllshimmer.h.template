#pragma once

// #------------------------------------------------------------------#
// |                        "DON'T TOUCH" ZONE                        |
// |                         (auto generated)                         |
// #------------------------------------------------------------------#

#include <stdio.h>
#include <windows.h>

#define T UINT64
#define PARAMS                                                                 \
  T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8, T a9, T a10, T a11, T a12
#define ARGS a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12

#define logf(...) fprintf(CTX.dbgOut, __VA_ARGS__)

typedef struct {
  FILE *dbgOut;
} Ctx;

Ctx CTX;

void InitCTX() {
{{- if gt (len .DebugFile) 0  }}
  
  CTX.dbgOut = fopen("{{.DebugFile}}", "w");
  if (!CTX.dbgOut) {
    // TODO: Change to message box
    perror("fopen");
  }
  
{{- else }}
  
  CTX.dbgOut = stdout;
  
{{- end }}
}

typedef T (*FuncPtr)(PARAMS);

void LogCurrentDirectory() {
  char buf[MAX_PATH];
  DWORD len = GetCurrentDirectoryA(MAX_PATH, buf);
  if (len == 0 || len >= MAX_PATH) {
    logf("\tGetCurrentDirectoryA failed\n");
    return;
  }

  logf("\tCurrent directory: '%s'\n", buf);
}

FuncPtr getProxyFunc(const char *funcName) {
  HMODULE hModule = LoadLibraryA("{{.Original}}");
  if (hModule == NULL) {
    logf("[!] {{.DllName}}: LoadLibraryA({{.Original}}) failed\n");
    logf("\tError code: %lu\n", GetLastError());
    LogCurrentDirectory();
  }

  FuncPtr pFunc = (FuncPtr)GetProcAddress(hModule, funcName);
  if (pFunc == NULL) {
    logf("[!] {{.DllName}}: GetProcAddress(%s, {{.Original}}) failed\n",
           funcName);
    logf("\tError code: %lu\n", GetLastError());
  }

  return pFunc;
}

#define MUTEX(name)                                                            \
  (CreateMutexA(NULL, TRUE, name) && GetLastError() != ERROR_ALREADY_EXISTS)

#define PROXY_FUNCTION(funcName) getProxyFunc(funcName)(ARGS);

// TODO: Cache LoadLibraryA() and GetProcAddress() result
