{{- $r := . }}
#include <windows.h>
#include <stdio.h>
#include <iostream>
// Put your imports here...

// #------------------------------------------------------------------#
// |                        "DON'T TOUCH" ZONE                        |
// |                         (auto generated)                         |
// #------------------------------------------------------------------#

#define MUTEX(name) \
    (CreateMutexA(NULL, TRUE, name) && GetLastError() != ERROR_ALREADY_EXISTS)

#define ARGS_COUNT 12

typedef uint64_t (*Func12)(
    uint64_t, uint64_t, uint64_t, uint64_t,
    uint64_t, uint64_t, uint64_t, uint64_t,
    uint64_t, uint64_t, uint64_t, uint64_t
);

#define PROXY_FUNCTION(function)                                                 \
    va_list ap;                                                                  \
    va_start(ap, arg1);                                                          \
    uint64_t args[ARGS_COUNT];                                                   \
    args[0] = arg1;                                                              \
                                                                                 \
    for (int i = 1; i < ARGS_COUNT ; i++) {                                      \
        args[i] = va_arg(ap, uint64_t);                                          \
    }                                                                            \
                                                                                 \
    va_end(ap);                                                                  \
                                                                                 \
    HMODULE hModule = LoadLibraryA("{{.ProxyDll}}");                             \
    if (hModule == NULL) {                                                       \
        printf("[!] {{.DllName}}: LoadLibraryA({{.ProxyDll}}) failed\n");      \
        printf("\tError code: %lu\n", GetLastError());                           \
    }                                                                            \
                                                                                 \
    Func12 pFunction = (Func12) GetProcAddress(hModule, function);               \
    if (pFunction == NULL) {                                                     \
        printf(                                                                  \
            "[!] {{.DllName}}: GetProcAddress(%s, {{.ProxyDll}}) failed\n",     \
            function );                                                          \
        printf("\tError code: %lu\n", GetLastError());                           \
                                                                                 \
    }                                                                            \
                                                                                 \
    return pFunction(args[0], args[1], args[2], args[3], args[4], args[5],       \
                        args[6], args[7], args[8], args[9], args[10], args[11]); \

// #------------------------------------------------------------------#
// |                    END OF "DON'T TOUCH" ZONE                     |
// #------------------------------------------------------------------#

{{- range $i, $v := .Functions }}
{{- if eq (len $v.Forwarder) 0 }}

extern "C" UINT64 {{$v.Name}}Fwd(UINT64 arg1, ...) {
    #ifdef DEBUG
        printf("[+] {{$r.DllName}}: {{$v.Name}} called\n");
    #endif
    {{ if $r.Mutex }}
    if (MUTEX("Global\\{{$v.Name}}__{{$i}}")) {
        // Put your code here...
    }
    {{- else }}
        // Put your code here...
    {{- end }}

    PROXY_FUNCTION("{{$v.Name}}");
}

{{- end }}
{{- end }}


BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) { 
    
    switch (fdwReason) {
    case DLL_PROCESS_ATTACH: {
        #ifdef DEBUG
            printf("[+] {{.DllName}}: DLL_PROCESS_ATTACH event\n");
        #endif
    }
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }

    return TRUE;
}